diff --git a/Makefile b/Makefile
index fb5d667..aba8f3b 100644
--- a/Makefile
+++ b/Makefile
@@ -184,6 +184,7 @@ UPROGS=\
 	_zombie\
 	_test\
 	_lab1_test\
+	_lab2_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -220,7 +221,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/defs.h b/defs.h
index 990e762..6802148 100644
--- a/defs.h
+++ b/defs.h
@@ -123,6 +123,7 @@ void            yield(void);
 // User-added functions and syscalls
 void            hello(void); // syscall hello fn
 int             waitpid(int, int*, int);
+void            setPriority(int); // lab 2
 //void            lab1_test(void);
 
 // swtch.S
diff --git a/exec.c b/exec.c
index b40134f..c657d80 100644
--- a/exec.c
+++ b/exec.c
@@ -18,7 +18,6 @@ exec(char *path, char **argv)
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-
   begin_op();
 
   if((ip = namei(path)) == 0){
@@ -99,6 +98,7 @@ exec(char *path, char **argv)
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+  curproc->T_start = ticks;
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
diff --git a/lab2_test.c b/lab2_test.c
index c88d7ad..d35a81d 100644
--- a/lab2_test.c
+++ b/lab2_test.c
@@ -23,14 +23,14 @@ int PScheduler(void){
     printf(1, "Assuming that the priorities range between range between 0 to 31\n");
     printf(1, "0 is the highest priority. All processes have a default priority of 10\n");
     printf(1, " - The parent processes will switch to priority 0\n");
-    setpriority(0); // Use your own setpriority interface
+    setPriority(0); // Use your own setpriority interface
     for (i = 0; i < 3; i++) {
 	pid = fork();
 	if (pid > 0) {
             continue;
         } else if ( pid == 0) {
             printf(1, " - Hello! this is child# %d and I will change my priority to %d \n", getpid(), 60 - 20 * i);
-            setpriority(30 - 10 * i); // Use your own setpriority interface
+            setPriority(30 - 10 * i); // Use your own setpriority interface
             for (j = 0; j < 50000; j++) {
                 asm("nop");
                 for(k = 0; k < 10000; k++) {
diff --git a/proc.c b/proc.c
index efaa55f..0009654 100644
--- a/proc.c
+++ b/proc.c
@@ -88,6 +88,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->priority = 10;
+//  p->T_start = ticks;
 
   release(&ptable.lock);
 
@@ -199,6 +201,8 @@ fork(void)
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  np->T_start = ticks;
+//  np->burstTime = ticks;
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -230,6 +234,7 @@ exit(int exitStat)
   struct proc *curproc = myproc();
   struct proc *p;
   int fd;
+  int turnaround;
 
   curproc->exitStatus = exitStat;
 
@@ -244,7 +249,14 @@ exit(int exitStat)
     }
   }
 
-  begin_op();
+  curproc->T_finish = ticks;
+  turnaround = curproc->T_finish - curproc->T_start;
+  cprintf("\nTurnaround time: %d | Waiting time: %d\n", turnaround, turnaround - curproc->burstTime);
+//  cprintf("T_start = %d, T_finish = %d\n", curproc->T_start, curproc->T_finish);
+//  cprintf("Burst time = %d\n", curproc->burstTime);
+
+
+    begin_op();
   iput(curproc->cwd);
   end_op();
   curproc->cwd = 0;
@@ -330,6 +342,9 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
+  int topPriority = 31;
+//  int startRun;
+//  int endRun;
   
   for(;;){
     // Enable interrupts on this processor.
@@ -337,9 +352,26 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        // Find highest priority process
+        if(p->priority < topPriority) {
+            topPriority = p->priority;
+        }
+    }
+
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
+
+      if(p->priority > topPriority) { // check for curr proc priority is top priority
+          p->priority--; // make proc increase priority everytime it waits
+          continue;
+      }
+
+      // Continues to check if proc is runnable.
+      if(p->state != RUNNABLE) {
+          continue; // works like 'break;'
+      }
+
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -347,16 +379,22 @@ scheduler(void)
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
+      p->burstTime++;
 
-      swtch(&(c->scheduler), p->context);
+
+        swtch(&(c->scheduler), p->context);
       switchkvm();
 
+      p->priority++; // decrease priority every time proc is running.
+//      endRun = ticks;
+
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+//        cprintf("startRun = %d, endRun = %d\n", startRun, endRun);
+
     }
     release(&ptable.lock);
-
   }
 }
 
@@ -593,3 +631,9 @@ waitpid(int pid, int* status, int options)
 //void lab1_test(void) {
 //    cprintf("\n Run Lab 1 Test\n");
 //}
+
+void
+setPriority(int priority) {
+    struct proc *p = myproc();
+    p->priority = priority;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index bede720..38ed079 100644
--- a/proc.h
+++ b/proc.h
@@ -50,7 +50,11 @@ struct proc {
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
   // modified
-  int exitStatus;                // saves exit status for terminated process - E.N.
+  int exitStatus;              // saves exit status for terminated process - E.N.
+  int priority;                // Lab2: store priority of process
+  int T_start;                 // Lab2: tracking scheduling, CPU ticks in exec()
+  int T_finish;                // Lab2: CPU ticks in exit()
+  int burstTime;               // lab2: burst time
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 887f94d..80c4adc 100644
--- a/syscall.c
+++ b/syscall.c
@@ -106,7 +106,8 @@ extern int sys_uptime(void);
 // user-added functions
 extern int sys_hello(void); // sys call hello
 extern int sys_waitpid(void); // sys call waitpid
-//extern int sys_lab1_test(void); // sys call lab1 test
+extern int sys_setPriority(void); // lab 2 sys call priority
+// extern int sys_lab1_test(void); // sys call lab1 test
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -133,6 +134,7 @@ static int (*syscalls[])(void) = {
 // user-added
 [SYS_hello]   sys_hello, // sys call hello
 [SYS_waitpid] sys_waitpid, // sys call waitpid
+[SYS_setPriority] sys_setPriority, // sys call setpriority
 };
 
 void
diff --git a/syscall.h b/syscall.h
index dc8c0f5..66cd64a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -22,3 +22,5 @@
 #define SYS_close  21
 #define SYS_hello  22 // Hello function/system call
 #define SYS_waitpid 23 // waitpid syscall for lab1 part c
+#define SYS_setPriority 24 // set priority of process
+
diff --git a/sysproc.c b/sysproc.c
index c98fa49..a7522c4 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -109,3 +109,13 @@ int sys_waitpid(void) {
     argptr(1, (void *) &waitStat, sizeof(*waitStat)); // args: int, char**, int
     return waitpid(pid, waitStat, 1);
 }
+
+int sys_setPriority(void) {
+    int priority;
+    if(argint(0, &priority) < 0) {
+        return -1;
+    }
+    setPriority(priority);
+    return 0;
+}
+
diff --git a/user.h b/user.h
index b179470..c4109fb 100644
--- a/user.h
+++ b/user.h
@@ -27,6 +27,8 @@ int uptime(void);
 int hello(void); // function from lab 0
 int waitpid(int, int*, int); // lab 1 part c
 int lab1_test(void); // lab 1 part d
+int lab2_test(void); // lab 2 priority test
+int setPriority(int); // lab 2, set priority function
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index e54d13a..b5beade 100644
--- a/usys.S
+++ b/usys.S
@@ -31,3 +31,4 @@ SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(hello) // Again, the hello function from lab 0
 SYSCALL(waitpid) // Lab 1 Part C
+SYSCALL(setPriority) // Lab 2
